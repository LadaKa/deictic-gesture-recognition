// Generated by gencpp from file pointing_gesture/PointingArmJoints.msg
// DO NOT EDIT!


#ifndef POINTING_GESTURE_MESSAGE_POINTINGARMJOINTS_H
#define POINTING_GESTURE_MESSAGE_POINTINGARMJOINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>

namespace pointing_gesture
{
template <class ContainerAllocator>
struct PointingArmJoints_
{
  typedef PointingArmJoints_<ContainerAllocator> Type;

  PointingArmJoints_()
    : body_id(0)
    , tracking_status(0)
    , joint_position_right_elbow()
    , joint_position_right_wrist()  {
    }
  PointingArmJoints_(const ContainerAllocator& _alloc)
    : body_id(0)
    , tracking_status(0)
    , joint_position_right_elbow(_alloc)
    , joint_position_right_wrist(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _body_id_type;
  _body_id_type body_id;

   typedef int32_t _tracking_status_type;
  _tracking_status_type tracking_status;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _joint_position_right_elbow_type;
  _joint_position_right_elbow_type joint_position_right_elbow;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _joint_position_right_wrist_type;
  _joint_position_right_wrist_type joint_position_right_wrist;





  typedef boost::shared_ptr< ::pointing_gesture::PointingArmJoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pointing_gesture::PointingArmJoints_<ContainerAllocator> const> ConstPtr;

}; // struct PointingArmJoints_

typedef ::pointing_gesture::PointingArmJoints_<std::allocator<void> > PointingArmJoints;

typedef boost::shared_ptr< ::pointing_gesture::PointingArmJoints > PointingArmJointsPtr;
typedef boost::shared_ptr< ::pointing_gesture::PointingArmJoints const> PointingArmJointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pointing_gesture::PointingArmJoints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pointing_gesture::PointingArmJoints_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pointing_gesture::PointingArmJoints_<ContainerAllocator1> & lhs, const ::pointing_gesture::PointingArmJoints_<ContainerAllocator2> & rhs)
{
  return lhs.body_id == rhs.body_id &&
    lhs.tracking_status == rhs.tracking_status &&
    lhs.joint_position_right_elbow == rhs.joint_position_right_elbow &&
    lhs.joint_position_right_wrist == rhs.joint_position_right_wrist;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pointing_gesture::PointingArmJoints_<ContainerAllocator1> & lhs, const ::pointing_gesture::PointingArmJoints_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pointing_gesture

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pointing_gesture::PointingArmJoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pointing_gesture::PointingArmJoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pointing_gesture::PointingArmJoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pointing_gesture::PointingArmJoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pointing_gesture::PointingArmJoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pointing_gesture::PointingArmJoints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pointing_gesture::PointingArmJoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a9f24fef50af6a7736edb41c88452247";
  }

  static const char* value(const ::pointing_gesture::PointingArmJoints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa9f24fef50af6a77ULL;
  static const uint64_t static_value2 = 0x36edb41c88452247ULL;
};

template<class ContainerAllocator>
struct DataType< ::pointing_gesture::PointingArmJoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pointing_gesture/PointingArmJoints";
  }

  static const char* value(const ::pointing_gesture::PointingArmJoints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pointing_gesture::PointingArmJoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 body_id           \n"
"int32 tracking_status\n"
"\n"
"geometry_msgs/Point32 joint_position_right_elbow\n"
"geometry_msgs/Point32 joint_position_right_wrist\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::pointing_gesture::PointingArmJoints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pointing_gesture::PointingArmJoints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.body_id);
      stream.next(m.tracking_status);
      stream.next(m.joint_position_right_elbow);
      stream.next(m.joint_position_right_wrist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PointingArmJoints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pointing_gesture::PointingArmJoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pointing_gesture::PointingArmJoints_<ContainerAllocator>& v)
  {
    s << indent << "body_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.body_id);
    s << indent << "tracking_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tracking_status);
    s << indent << "joint_position_right_elbow: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_position_right_elbow);
    s << indent << "joint_position_right_wrist: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_position_right_wrist);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POINTING_GESTURE_MESSAGE_POINTINGARMJOINTS_H
