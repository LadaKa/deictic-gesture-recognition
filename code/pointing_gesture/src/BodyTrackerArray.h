// Generated by gencpp from file pointing_gesture/BodyTrackerArray.msg
// DO NOT EDIT!


#ifndef POINTING_GESTURE_MESSAGE_MESSAGE_BODYTRACKERARRAY_H
#define POINTING_GESTURE_MESSAGE_MESSAGE_BODYTRACKERARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include "BodyTracker.h"

namespace pointing_gesture
{
template <class ContainerAllocator>
struct BodyTrackerArray_
{
  typedef BodyTrackerArray_<ContainerAllocator> Type;

  BodyTrackerArray_()
    : header()
    , detected_list()  {
    }
  BodyTrackerArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , detected_list(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::pointing_gesture::BodyTracker_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pointing_gesture::BodyTracker_<ContainerAllocator> >::other >  _detected_list_type;
  _detected_list_type detected_list;





  typedef boost::shared_ptr< ::pointing_gesture::BodyTrackerArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pointing_gesture::BodyTrackerArray_<ContainerAllocator> const> ConstPtr;

}; // struct BodyTrackerArray_

typedef ::pointing_gesture::BodyTrackerArray_<std::allocator<void> > BodyTrackerArray;

typedef boost::shared_ptr< ::pointing_gesture::BodyTrackerArray > BodyTrackerArrayPtr;
typedef boost::shared_ptr< ::pointing_gesture::BodyTrackerArray const> BodyTrackerArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pointing_gesture::BodyTrackerArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pointing_gesture::BodyTrackerArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pointing_gesture::BodyTrackerArray_<ContainerAllocator1> & lhs, const ::pointing_gesture::BodyTrackerArray_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.detected_list == rhs.detected_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pointing_gesture::BodyTrackerArray_<ContainerAllocator1> & lhs, const ::pointing_gesture::BodyTrackerArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pointing_gesture

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pointing_gesture::BodyTrackerArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pointing_gesture::BodyTrackerArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pointing_gesture::BodyTrackerArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pointing_gesture::BodyTrackerArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pointing_gesture::BodyTrackerArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pointing_gesture::BodyTrackerArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pointing_gesture::BodyTrackerArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b17f35baa8cff8577cd47f2e42155506";
  }

  static const char* value(const ::pointing_gesture::BodyTrackerArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb17f35baa8cff857ULL;
  static const uint64_t static_value2 = 0x7cd47f2e42155506ULL;
};

template<class ContainerAllocator>
struct DataType< ::pointing_gesture::BodyTrackerArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pointing_gesture/BodyTrackerArray";
  }

  static const char* value(const ::pointing_gesture::BodyTrackerArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pointing_gesture::BodyTrackerArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"BodyTracker[] detected_list\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: pointing_gesture/BodyTracker\n"
"int32  body_id\n"
"int32  tracking_status\n"
"int32  gesture\n"
"bool   face_found\n"
"\n"
"# 2d face bounding Box position in pixels from 0,0 (top left of image)\n"
"int32  face_left\n"
"int32  face_top\n"
"int32  face_width\n"
"int32  face_height\n"
"int32  age     # rough estimate of persons age\n"
"int32  gender  # 0 = unknown, 1 = male, 2 = female\n"
"string name    # if match for persons face found in database\n"
"\n"
"geometry_msgs/Point32 position2d   # body x,y in camera frame, z = range from camera\n"
"geometry_msgs/Point32 position3d   # body x,y,z in world coordinates\n"
"geometry_msgs/Point32 face_center  # face x,y in camera frame, z = range from camera\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::pointing_gesture::BodyTrackerArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pointing_gesture::BodyTrackerArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.detected_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BodyTrackerArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pointing_gesture::BodyTrackerArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pointing_gesture::BodyTrackerArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "detected_list[]" << std::endl;
    for (size_t i = 0; i < v.detected_list.size(); ++i)
    {
      s << indent << "  detected_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pointing_gesture::BodyTracker_<ContainerAllocator> >::stream(s, indent + "    ", v.detected_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // pointing_gesture_MESSAGE_BODYTRACKERARRAY_H
