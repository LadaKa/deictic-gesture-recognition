<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from wsg_50.urdf.xacro              | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="wsg_50" xmlns:controller="http://playerstage.sourceforge.net/gazebo/xmlschema/#controller" xmlns:interface="http://playerstage.sourceforge.net/gazebo/xmlschema/#interface" xmlns:sensor="http://playerstage.sourceforge.net/gazebo/xmlschema/#sensor">
  <!--
    This is a top-level xacro instantiating the Gazebo-specific version of the
    'ur_robot' macro (ie: 'ur_robot_gazebo') and passing it values for all its
    required arguments.

    This file should be considered the Gazebo-specific variant of the file
    with the same name in the ur_description package. It accepts the same
    arguments, but instead of configuring everything for a real robot, will
    generate a Gazebo-compatible URDF with a ros_control hardware_interface
    attached to it.

    Only use this top-level xacro if you plan on spawning the robot in Gazebo
    'by itself', without any gripper or any other geometry attached.

    If you need to attach an end-effector, camera or need to integrate the
    robot into a larger workcell and want to spawn that as a single entity in
    Gazebo, DO NOT EDIT THIS FILE.

    Instead: create a new top-level xacro, give it a proper name, include the
    required '.xacro' files, instantiate the models (ie: call the macros) and
    connect everything by adding the appropriate joints.
  -->
  <!--
    Import main macro.

    NOTE: this imports the Gazebo-wrapper main macro, NOT the regular
          xacro macro (which is hosted by ur_description).
  -->
  <gazebo>
    <plugin filename="libgazebo_ros_diff_drive.so" name="differential_drive_controller">
      <alwaysOn>true</alwaysOn>
      <updateRate>40</updateRate>
      <legacyMode>false</legacyMode>
      <leftJoint>wheel_left_joint</leftJoint>
      <rightJoint>wheel_right_joint</rightJoint>
      <wheelSeparation>0.592</wheelSeparation>
      <wheelDiameter>0.260</wheelDiameter>
      <torque>20</torque>
      <commandTopic>cmd_vel</commandTopic>
      <odometryTopic>odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <robotBaseFrame>base_link</robotBaseFrame>
      <publishWheelTF>false</publishWheelTF>
      <publishWheelJointState>true</publishWheelJointState>
      <rosDebugLevel>na</rosDebugLevel>
      <wheelAcceleration>0</wheelAcceleration>
      <wheelTorque>5</wheelTorque>
      <odometrySource>world</odometrySource>
      <publishTf>true</publishTf>
      <publishOdomTF>true</publishOdomTF>
    </plugin>
    <plugin name="gazebo_ros_control">
      <robotNamespace>/</robotNamespace>
    </plugin>
  </gazebo>
  <gazebo reference="lidar_1_link">
    <sensor name="lidar_1_link" type="ray">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>100</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-1.48353</min_angle>
            <max_angle>1.48353</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>30.0</max>
          <resolution>0.05</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
                   achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
                   stddev of 0.01m will put 99.7% of samples within 0.03m of the true
                   reading. -->
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin filename="libgazebo_ros_laser.so" name="lidar_1_link">
        <topicName>lidar_1/scan_filtered</topicName>
        <frameName>lidar_1_link</frameName>
      </plugin>
    </sensor>
  </gazebo>
  <!-- IMU sensor -->
  <gazebo reference="imu_link">
    <gravity>true</gravity>
    <sensor name="imu_sensor" type="imu">
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <topic>__default_topic__</topic>
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <topicName>imu</topicName>
        <bodyName>imu_link</bodyName>
        <updateRateHZ>10.0</updateRateHZ>
        <gaussianNoise>0.0</gaussianNoise>
        <xyzOffset>0 0 0</xyzOffset>
        <rpyOffset>0 0 0</rpyOffset>
        <frameName>imu_link</frameName>
      </plugin>
      <pose>0 0 0 0 0 0</pose>
    </sensor>
  </gazebo>
  <!-- Ultrasonic sensors -->
  <gazebo reference="us_1_link">
    <!-- Visuals / Collisions omitted for this example -->
    <sensor name="range" type="ray">
      <ray>
        <scan>
          <horizontal>
            <samples>1</samples>
            <resolution>1.0</resolution>
            <min_angle>-0.01</min_angle>
            <max_angle>0.01</max_angle>
          </horizontal>
          <vertical>
            <samples>1</samples>
            <resolution>1</resolution>
            <min_angle>-0.01</min_angle>
            <max_angle>0.01</max_angle>
          </vertical>
        </scan>
        <range>
          <min>0.01</min>
          <max>3.75</max>
          <resolution>0.02</resolution>
        </range>
      </ray>
      <plugin filename="libgazebo_ros_range.so" name="libgazebo_ros_range">
        <gaussianNoise>0.005</gaussianNoise>
        <alwaysOn>true</alwaysOn>
        <updateRate>50</updateRate>
        <topicName>ultrasonic/us1</topicName>
        <frameName>us_1_link</frameName>
        <radiation>SONAR</radiation>
        <fov>0.2967</fov>
      </plugin>
    </sensor>
  </gazebo>
  <!-- camera -->
  <gazebo reference="camera_link">
    <sensor name="camera1" type="camera">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="camera_controller">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>camera1</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
  <!-- <gazebo>
  <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
 <legacyModeNS> false </legacyModeNS> 
  <robotParam>/robot_description</robotParam>
       <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
  </plugin>
</gazebo> -->
  <!--++++++++++++++++++++++++++++++base_link++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!--++++++++++++++++++++body++++++++++++++++++++++++++++-->
  <!-- SENSORS -->
  <!-- Sick S300 - Comment/Uncomment if required  -->
  <!-- Microscan - Comment/Uncomment if required -->
  <!-- <xacro:include filename="$(find neo_simulation)/robots/mp_500/xacros/micro_scan.xacro" /> -->
  <!-- USS, IMU and Camera- Comment/Uncomment if required  -->
  <!-->
  <xacro:include filename="$(find neo_simulation)/robots/mp_500/xacros/imu.xacro" />
  <xacro:include filename="$(find neo_simulation)/robots/mp_500/xacros/ultrasonic.xacro" />
  <xacro:include filename="$(find neo_simulation)/robots/mp_500/xacros/camera.xacro" />
  <-->
  <link name="base_link"/>
  <joint name="above_body_box_joint" type="fixed">
    <origin rpy="0 0 0" xyz="-0.3 0 0.505"/>
    <axis xyz="0 0 0"/>
    <parent link="base_footprint"/>
    <child link="above_body_box_link"/>
  </joint>
  <link name="above_body_box_link">
    <inertial>
      <mass value="15"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0" ixy="0.0" ixz="0.0" iyy="0" iyz="0.0" izz="0"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.23 0.4 0.3"/>
      </geometry>
      <material name="grey">
        <color rgba="0.7 0.7 0.7 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.23 0.4 0.3"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="above_body_box_link">
    <material>Gazebo/Grey</material>
  </gazebo>
  <joint name="above_body_platform_joint" type="fixed">
    <origin rpy="0 0 0" xyz="-0.05 0 0.4"/>
    <axis xyz="0 0 0"/>
    <parent link="base_footprint"/>
    <child link="above_body_platform_link"/>
  </joint>
  <link name="above_body_platform_link">
    <inertial>
      <mass value="5.1"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0" ixy="0.0" ixz="0.0" iyy="0" iyz="0.0" izz="0"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.26 0.26 0.15"/>
      </geometry>
      <material name="black">
        <color rgba="1 1 1 1"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.26 0.26 0.15"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="above_body_platform_link">
    <material>Gazebo/Black</material>
  </gazebo>
  <joint name="base_footprint_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <axis xyz="0 0 -1"/>
    <!-- <limit effort="1000.0" lower="-1e+16" upper="1e+16" velocity="3.5"/> -->
    <joint_properties damping="1" friction="1"/>
    <parent link="base_link"/>
    <child link="base_footprint"/>
  </joint>
  <link name="base_footprint">
    <inertial>
      <mass value="64.5"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="1.71402" ixy="0.0" ixz="0.0" iyy="0.8856" iyz="0.0" izz="2.5725"/>
    </inertial>
    <visual name="body">
      <origin rpy="0 0 1.570796" xyz="0.0 0.0 0"/>
      <geometry>
        <mesh filename="package://neo_simulation/robots/mp_500/meshes/MP-500-BODY.dae" scale="0.001 0.001 0.001"/>
      </geometry>
    </visual>
    <collision name="body_collision">
      <origin rpy=" 0 0. 1.570796" xyz="0.0 0.0 0.0"/>
      <geometry>
        <mesh filename="package://neo_simulation/robots/mp_500/meshes/MP-500-BODY.dae" scale="0.001 0.001 0.001"/>
      </geometry>
    </collision>
  </link>
  <joint name="caster_wheel_joint" type="fixed">
    <origin rpy="-1.570796 0 1.570796 " xyz="-0.43 0. 0.176"/>
    <axis xyz="0 -1 0"/>
    <limit effort="1000.0" lower="-1e+16" upper="1e+16" velocity="3.5"/>
    <parent link="base_footprint"/>
    <child link="caster_wheel_link"/>
    <joint_properties damping="1.0" friction="1.0"/>
  </joint>
  <link name="caster_wheel_link" type="wheel">
    <inertial>
      <mass value="1.82362"/>
      <inertia ixx="0.00499743171" ixy="0.00000004464" ixz="-0.00000002245" iyy="0.00499741733" iyz="0.00000000164" izz="0.00839239692"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </inertial>
    <visual name="castor_wheel">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://neo_simulation/robots/mp_500/meshes/MP-500-WHEEL.dae" scale="0.001 0.001 0.001"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://neo_simulation/robots/mp_500/meshes/MP-500-WHEEL.dae" scale="0.001 0.001 0.001"/>
      </geometry>
    </collision>
  </link>
  <gazebo reference="caster_wheel_link">
    <kp>8000.0</kp>
    <kd>1460.0</kd>
    <mu1>0.5</mu1>
    <mu2>0.2</mu2>
    <fdir1>1 0 0</fdir1>
    <maxVel>3.0</maxVel>
    <minDepth>0.00</minDepth>
  </gazebo>
  <joint name="wheel_right_joint" type="revolute">
    <origin rpy="0 0 -1.570796" xyz="0. -0.25 0.13"/>
    <limit effort="1000.0" lower="-1e+16" upper="1e+16" velocity="3.5"/>
    <axis xyz="-1 0 0"/>
    <joint_properties damping="0" friction="0.0"/>
    <parent link="base_link"/>
    <child link="wheel_right_link"/>
  </joint>
  <link name="wheel_right_link" type="wheel">
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="1.82362"/>
      <inertia ixx="0.00399743171" ixy="0.00000004464" ixz="-0.00000002245" iyy="0.00399741733" iyz="-0.00000000164" izz="0.00739239692"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://neo_simulation/robots/mp_500/meshes/MP-500-WHEEL-RIGHT.dae" scale="0.001 0.001 0.001"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://neo_simulation/robots/mp_500/meshes/MP-500-WHEEL-RIGHT.dae" scale="0.001 0.001 0.001"/>
      </geometry>
    </collision>
  </link>
  <joint name="wheel_left_joint" type="revolute">
    <origin rpy="0 0 -1.570796" xyz="0. 0.25 0.13"/>
    <limit effort="1000.0" lower="-1e+16" upper="1e+16" velocity="3.5"/>
    <axis xyz="-1 0 0"/>
    <joint_properties damping="0" friction="0.0"/>
    <parent link="base_link"/>
    <child link="wheel_left_link"/>
  </joint>
  <link name="wheel_left_link" type="wheel">
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="1.82362"/>
      <inertia ixx="0.00399743171" ixy="0.00000004464" ixz="-0.00000002245" iyy="0.00399741733" iyz="-0.00000000164" izz="0.00739239692"/>
    </inertial>
    <visual>
      <origin rpy="0 0 3.14" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://neo_simulation/robots/mp_500/meshes/MP-500-WHEEL-LEFT.dae" scale="0.001 0.001 0.001"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://neo_simulation/robots/mp_500/meshes/MP-500-WHEEL-LEFT.dae" scale="0.001 0.001 0.001"/>
      </geometry>
    </collision>
  </link>
  <joint name="lidar_1_joint" type="fixed">
    <axis xyz="0 1 0"/>
    <origin rpy="0 0 0" xyz="0.244 0 0.141"/>
    <parent link="base_link"/>
    <child link="lidar_1_link"/>
  </joint>
  <link name="lidar_1_link" type="laser">
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.000001" iyz="0" izz="0.0001"/>
    </inertial>
    <visual>
      <origin rpy="-1.57 -3.14 0" xyz="0 0 0.12"/>
      <geometry>
        <mesh filename="package://neo_simulation/robots/mp_500/meshes/SICK-S300.dae" scale="0.001 0.001 0.001"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="-1.57 0 3.14" xyz="0 0 0.12"/>
      <geometry>
        <mesh filename="package://neo_simulation/robots/mp_500/meshes/SICK-S300.dae" scale="0.001 0.001 0.001"/>
      </geometry>
    </collision>
  </link>
  <!--+++++++++++++++++++ IMU ++++++++++++++++++++++++-->
  <!-- Comment or uncomment based on your requirement -->
  <!--><xacro:imu name="imu" parent="base_link">
    <origin xyz="0.100 0 0.300" rpy="0 0 3.14" />
  </xacro:imu><-->
  <!--+++++++++++++++++++ Ultra Sonic ++++++++++++++++++++++++-->
  <!-- Comment or uncomment based on your requirement -->
  <!-- SENSOR 1 -->
  <!--><xacro:us_sensor name="us_1" parent="base_link">
    <origin xyz="0.100 0 0.500" rpy="0 3.14 3.14" />
  </xacro:us_sensor><-->
  <!-- SENSOR 2 -->
  <!-- xacro:us_sensor name="us_2" parent="base_link">
    <origin xyz="0.110 0 0.300" rpy="0 3.14 3.14" />
  </xacro:us_sensor-->
  <!-- SENSOR 3 -->
  <!-- xacro:us_sensor name="us_3" parent="base_link">
    <origin xyz="0.120 0 0.300" rpy="0 3.14 3.14" />
  </xacro:us_sensor-->
  <!-- SENSOR 4 -->
  <!-- xacro:us_sensor name="us_4" parent="base_link">
    <origin xyz="0.130 0 0.300" rpy="0 3.14 3.14" />
  </xacro:us_sensor-->
  <!-- SENSOR 5 -->
  <!-- xacro:us_sensor name="us_5" parent="base_link">
    <origin xyz="0.140 0 0.300" rpy="0 3.14 3.14" />
  </xacro:us_sensor-->
  <!-- SENSOR 6 -->
  <!-- xacro:us_sensor name="us_6" parent="base_link">
    <origin xyz="0.150 0 0.300" rpy="0 3.14 3.14" />
  </xacro:us_sensor-->
  <!-- SENSOR 7 -->
  <!-- xacro:us_sensor name="us_7" parent="base_link">
    <origin xyz="0.160 0 0.300" rpy="0 3.14 3.14" />
  </xacro:us_sensor-->
  <!-- SENSOR 8 -->
  <!-- xacro:us_sensor name="us_8" parent="base_link">
    <origin xyz="0.170 0 0.300" rpy="0 3.14 3.14" />
  </xacro:us_sensor-->
  <!-- SENSOR 9 -->
  <!-- xacro:us_sensor name="us_9" parent="base_link">
    <origin xyz="0.180 0 0.300" rpy="0 3.14 3.14" />
  </xacro:us_sensor-->
  <!-- SENSOR 10 -->
  <!-- xacro:us_sensor name="us_10" parent="base_link">
    <origin xyz="0.100 0 0.300" rpy="0 3.14 3.14" />
  </xacro:us_sensor-->
  <!-- SENSOR 11 -->
  <!-- xacro:us_sensor name="us_11" parent="base_link">
    <origin xyz="0.100 0 0.300" rpy="0 3.14 3.14" />
  </xacro:us_sensor-->
  <!-- SENSOR 12 -->
  <!-- xacro:us_sensor name="us_12" parent="base_link">
    <origin xyz="0.190 0 0.300" rpy="0 3.14 3.14" />
  </xacro:us_sensor-->
  <!-- SENSOR 13 -->
  <!-- xacro:us_sensor name="us_13" parent="base_link">
    <origin xyz="0.200 0 0.300" rpy="0 3.14 3.14" />
  </xacro:us_sensor-->
  <!-- SENSOR 14 -->
  <!-- xacro:us_sensor name="us_14" parent="base_link">
    <origin xyz="0.210 0 0.300" rpy="0 3.14 3.14" />
  </xacro:us_sensor-->
  <!-- SENSOR 15 -->
  <!-- xacro:us_sensor name="us_15" parent="base_link">
    <origin xyz="0.220 0 0.300" rpy="0 3.14 3.14" />
  </xacro:us_sensor-->
  <!-- SENSOR 16 -->
  <!-- xacro:us_sensor name="us_16" parent="base_link">
    <origin xyz="0.230 0 0.300" rpy="0 3.14 3.14" />
  </xacro:us_sensor-->
  <!--Camera  -->
  <!-- <xacro:camera name="camera" parent="base_link">
    <origin xyz="0 0 0.38" rpy="0 0 0" />
  </xacro:camera>
 -->
  <origin xyz="2 2 0"/>
  <!--
    Main xacro macro definition of the "Gazebo robot" model.

    This wraps the model of the real robot and adds all elements and parameters
    required by Gazebo.

    It also adds the gazebo_ros_control plugin.

    NOTE: this is NOT a URDF. It cannot directly be loaded by consumers
    expecting a flattened '.urdf' file. See the top-level '.xacro' for that
    (but note: that .xacro must still be processed by the xacro command).

    For use in '.launch' files: use one of the 'load_urX.launch' convenience
    launch files.

    NOTE: this Gazebo model makes use of the same set of parameter files as the
    main xacro macro (in ur_description). It is therefor possible to use the
    kinematic calibration exported from a REAL UR robot. Please refer to the
    ur_macro.xacro in ur_description for more information about this.

    Main author of the migration to yaml configs: Ludovic Delval.

    Contributors to previous versions (in no particular order):

     - Felix Messmer
     - Kelsey Hawkins
     - Shaun Edwards
     - Alexander Bubeck
     - Nadia Hammoudeh Garcia
     - G. vd. Hoorn
     - Dave Niewinski
     - Andy Zelenak
     - Miguel Prada
     - Mathias Luedtke
     - Hans-Joachim Krauch
     - Felix Exner
  -->
  <!--
    Base UR robot series xacro macro.

    NOTE: this is NOT a URDF. It cannot directly be loaded by consumers
    expecting a flattened '.urdf' file. See the top-level '.xacro' for that
    (but note: that .xacro must still be processed by the xacro command).

    For use in '.launch' files: use one of the 'load_urX.launch' convenience
    launch files.

    This file models the base kinematic chain of a UR robot, which then gets
    parameterised by various configuration files to convert it into a UR3(e),
    UR5(e), UR10(e) or UR16e.

    NOTE: the default kinematic parameters (ie: link lengths, frame locations,
    offets, etc) do not correspond to any particular robot. They are defaults
    only. There WILL be non-zero offsets between the Forward Kinematics results
    in TF (ie: robot_state_publisher) and the values reported by the Teach
    Pendant.

    For accurate (and robot-specific) transforms, the 'kinematics_parameters_file'
    parameter MUST point to a .yaml file containing the appropriate values for
    the targetted robot.

    If using the UniversalRobots/Universal_Robots_ROS_Driver, follow the steps
    described in the readme of that repository to extract the kinematic
    calibration from the controller and generate the required .yaml file.

    Main author of the migration to yaml configs: Ludovic Delval.

    Contributors to previous versions (in no particular order):

     - Felix Messmer
     - Kelsey Hawkins
     - Wim Meeussen
     - Shaun Edwards
     - Nadia Hammoudeh Garcia
     - Dave Hershberger
     - G. vd. Hoorn
     - Philip Long
     - Dave Coleman
     - Miguel Prada
     - Mathias Luedtke
     - Marcel Schnirring
     - Felix von Drigalski
     - Felix Exner
     - Jimmy Da Silva
     - Ajit Krisshna N L
     - Muhammad Asif Rana
  -->
  <!--
    NOTE: the macro defined in this file is NOT part of the public API of this
          package. Users CANNOT rely on this file being available, or stored in
          this location. Nor can they rely on the existence of the macro.
  -->
  <transmission name="ur5_shoulder_pan_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="ur5_shoulder_pan_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="ur5_shoulder_pan_motor">
      <mechanicalReduction>1</mechanicalReduction>
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </actuator>
  </transmission>
  <transmission name="ur5_shoulder_lift_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="ur5_shoulder_lift_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="ur5_shoulder_lift_motor">
      <mechanicalReduction>1</mechanicalReduction>
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </actuator>
  </transmission>
  <transmission name="ur5_elbow_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="ur5_elbow_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="ur5_elbow_motor">
      <mechanicalReduction>1</mechanicalReduction>
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </actuator>
  </transmission>
  <transmission name="ur5_wrist_1_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="ur5_wrist_1_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="ur5_wrist_1_motor">
      <mechanicalReduction>1</mechanicalReduction>
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </actuator>
  </transmission>
  <transmission name="ur5_wrist_2_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="ur5_wrist_2_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="ur5_wrist_2_motor">
      <mechanicalReduction>1</mechanicalReduction>
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </actuator>
  </transmission>
  <transmission name="ur5_wrist_3_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="ur5_wrist_3_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="ur5_wrist_3_motor">
      <mechanicalReduction>1</mechanicalReduction>
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </actuator>
  </transmission>
  <!-- links: main serial chain -->
  <link name="ur5_base_link"/>
  <link name="ur5_base_link_inertia">
    <visual>
      <origin rpy="0 0 3.141592653589793" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/visual/base.dae"/>
      </geometry>
      <material name="LightGrey">
        <color rgba="0.7 0.7 0.7 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 3.141592653589793" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/collision/base.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="1.9"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.002105832491" ixy="0.0" ixz="0.0" iyy="0.002105832491" iyz="0.0" izz="0.0034199999999999994"/>
    </inertial>
  </link>
  <link name="ur5_shoulder_link">
    <visual>
      <origin rpy="0 0 3.141592653589793" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/visual/shoulder.dae"/>
      </geometry>
      <material name="LightGrey">
        <color rgba="0.7 0.7 0.7 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 3.141592653589793" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/collision/shoulder.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="3.7"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.014972352344389999" ixy="0.0" ixz="0.0" iyy="0.014972352344389999" iyz="0.0" izz="0.01040625"/>
    </inertial>
  </link>
  <link name="ur5_upper_arm_link">
    <visual>
      <origin rpy="1.5707963267948966 0 -1.5707963267948966" xyz="0 0 0.13585"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/visual/upperarm.dae"/>
      </geometry>
      <material name="LightGrey">
        <color rgba="0.7 0.7 0.7 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 -1.5707963267948966" xyz="0 0 0.13585"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/collision/upperarm.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="8.393"/>
      <origin rpy="0 1.5707963267948966 0" xyz="-0.2125 0.0 0.136"/>
      <inertia ixx="0.1338857818623325" ixy="0.0" ixz="0.0" iyy="0.1338857818623325" iyz="0.0" izz="0.0151074"/>
    </inertial>
  </link>
  <link name="ur5_forearm_link">
    <visual>
      <origin rpy="1.5707963267948966 0 -1.5707963267948966" xyz="0 0 0.0165"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/visual/forearm.dae"/>
      </geometry>
      <material name="LightGrey">
        <color rgba="0.7 0.7 0.7 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 -1.5707963267948966" xyz="0 0 0.0165"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/collision/forearm.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="2.275"/>
      <origin rpy="0 1.5707963267948966 0" xyz="-0.196125 0.0 0.0165"/>
      <inertia ixx="0.03121679102890359" ixy="0.0" ixz="0.0" iyy="0.03121679102890359" iyz="0.0" izz="0.004095"/>
    </inertial>
  </link>
  <link name="ur5_wrist_1_link">
    <visual>
      <!-- TODO: Move this to a parameter -->
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 -0.093"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/visual/wrist1.dae"/>
      </geometry>
      <material name="LightGrey">
        <color rgba="0.7 0.7 0.7 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 -0.093"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/collision/wrist1.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="1.219"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.0020138887777775" ixy="0.0" ixz="0.0" iyy="0.0020138887777775" iyz="0.0" izz="0.0021942"/>
    </inertial>
  </link>
  <link name="ur5_wrist_2_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 -0.095"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/visual/wrist2.dae"/>
      </geometry>
      <material name="LightGrey">
        <color rgba="0.7 0.7 0.7 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 -0.095"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/collision/wrist2.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="1.219"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.0018310388509175" ixy="0.0" ixz="0.0" iyy="0.0018310388509175" iyz="0.0" izz="0.0021942"/>
    </inertial>
  </link>
  <link name="ur5_wrist_3_link">
    <visual>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 -0.0818"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/visual/wrist3.dae"/>
      </geometry>
      <material name="LightGrey">
        <color rgba="0.7 0.7 0.7 1.0"/>
      </material>
    </visual>
    <collision>
      <origin rpy="1.5707963267948966 0 0" xyz="0 0 -0.0818"/>
      <geometry>
        <mesh filename="package://ur_description/meshes/ur5/collision/wrist3.stl"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.1879"/>
      <origin rpy="0 0 0" xyz="0.0 0.0 -0.01525"/>
      <inertia ixx="8.062472608343e-05" ixy="0.0" ixz="0.0" iyy="8.062472608343e-05" iyz="0.0" izz="0.0001321171875"/>
    </inertial>
  </link>
  <!-- joints: main serial chain -->
  <joint name="ur5_base_link-base_link_inertia" type="fixed">
    <parent link="ur5_base_link"/>
    <child link="ur5_base_link_inertia"/>
    <!-- 'base_link' is REP-103 aligned (so X+ forward), while the internal
           frames of the robot/controller have X+ pointing backwards.
           Use the joint between 'base_link' and 'base_link_inertia' (a dummy
           link/frame) to introduce the necessary rotation over Z (of pi rad).
      -->
    <origin rpy="0 0 1.5707963267948966" xyz="0 0 0"/>
  </joint>
  <joint name="ur5_shoulder_pan_joint" type="revolute">
    <parent link="ur5_base_link_inertia"/>
    <child link="ur5_shoulder_link"/>
    <origin rpy="0 0 0" xyz="0 0 0.089159"/>
    <axis xyz="0 0 1"/>
    <limit effort="150.0" lower="-6.283185307179586" upper="6.283185307179586" velocity="3.141592653589793"/>
    <dynamics damping="0" friction="0"/>
  </joint>
  <joint name="ur5_shoulder_lift_joint" type="revolute">
    <parent link="ur5_shoulder_link"/>
    <child link="ur5_upper_arm_link"/>
    <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
    <axis xyz="0 0 1"/>
    <limit effort="150.0" lower="-6.283185307179586" upper="6.283185307179586" velocity="3.141592653589793"/>
    <dynamics damping="0" friction="0"/>
  </joint>
  <joint name="ur5_elbow_joint" type="revolute">
    <parent link="ur5_upper_arm_link"/>
    <child link="ur5_forearm_link"/>
    <origin rpy="0 0 0" xyz="-0.425 0 0"/>
    <axis xyz="0 0 1"/>
    <limit effort="150.0" lower="-3.141592653589793" upper="3.141592653589793" velocity="3.141592653589793"/>
    <dynamics damping="0" friction="0"/>
  </joint>
  <joint name="ur5_wrist_1_joint" type="revolute">
    <parent link="ur5_forearm_link"/>
    <child link="ur5_wrist_1_link"/>
    <origin rpy="0 0 0" xyz="-0.39225 0 0.10915"/>
    <axis xyz="0 0 1"/>
    <limit effort="28.0" lower="-6.283185307179586" upper="6.283185307179586" velocity="3.141592653589793"/>
    <dynamics damping="0" friction="0"/>
  </joint>
  <joint name="ur5_wrist_2_joint" type="revolute">
    <parent link="ur5_wrist_1_link"/>
    <child link="ur5_wrist_2_link"/>
    <origin rpy="1.570796327 0 0" xyz="0 -0.09465 -1.941303950897609e-11"/>
    <axis xyz="0 0 1"/>
    <limit effort="28.0" lower="-6.283185307179586" upper="6.283185307179586" velocity="3.141592653589793"/>
    <dynamics damping="0" friction="0"/>
  </joint>
  <joint name="ur5_wrist_3_joint" type="revolute">
    <parent link="ur5_wrist_2_link"/>
    <child link="ur5_wrist_3_link"/>
    <origin rpy="1.570796326589793 3.141592653589793 3.141592653589793" xyz="0 0.0823 -1.688001216681175e-11"/>
    <axis xyz="0 0 1"/>
    <limit effort="28.0" lower="-6.283185307179586" upper="6.283185307179586" velocity="3.141592653589793"/>
    <dynamics damping="0" friction="0"/>
  </joint>
  <!-- ROS-Industrial 'base' frame: base_link to UR 'Base' Coordinates transform -->
  <link name="ur5_base"/>
  <joint name="ur5_base_link-base_fixed_joint" type="fixed">
    <!-- Note the rotation over Z of pi radians: as base_link is REP-103
           aligned (ie: has X+ forward, Y+ left and Z+ up), this is needed
           to correctly align 'base' with the 'Base' coordinate system of
           the UR controller.
      -->
    <origin rpy="0 0 3.141592653589793" xyz="0 0 0"/>
    <parent link="ur5_base_link"/>
    <child link="ur5_base"/>
  </joint>
  <!-- ROS-Industrial 'flange' frame: attachment point for EEF models -->
  <link name="ur5_flange"/>
  <joint name="ur5_wrist_3-flange" type="fixed">
    <parent link="ur5_wrist_3_link"/>
    <child link="ur5_flange"/>
    <origin rpy="0 -1.5707963267948966 -1.5707963267948966" xyz="0 0 0"/>
  </joint>
  <!-- ROS-Industrial 'tool0' frame: all-zeros tool frame -->
  <link name="ur5_tool0"/>
  <joint name="ur5_flange-tool0" type="fixed">
    <!-- default toolframe: X+ left, Y+ up, Z+ front -->
    <origin rpy="1.5707963267948966 0 1.5707963267948966" xyz="0 0 0"/>
    <parent link="ur5_flange"/>
    <child link="ur5_tool0"/>
  </joint>
  <!-- Configure self collision properties per link -->
  <gazebo reference="ur5_shoulder_link">
    <!-- <gravity>false</gravity> -->
    <selfCollide>true</selfCollide>
  </gazebo>
  <gazebo reference="ur5_upper_arm_link">
    <!-- <gravity>false</gravity> -->
    <selfCollide>true</selfCollide>
  </gazebo>
  <gazebo reference="ur5_forearm_link">
    <!-- <gravity>false</gravity> -->
    <selfCollide>true</selfCollide>
  </gazebo>
  <gazebo reference="ur5_wrist_1_link">
    <!-- <gravity>false</gravity> -->
    <selfCollide>true</selfCollide>
  </gazebo>
  <gazebo reference="ur5_wrist_3_link">
    <!-- <gravity>false</gravity> -->
    <selfCollide>true</selfCollide>
  </gazebo>
  <gazebo reference="ur5_wrist_2_link">
    <!-- <gravity>false</gravity> -->
    <selfCollide>true</selfCollide>
  </gazebo>
  <gazebo reference="ur5_ee_link">
    <!-- <gravity>false</gravity> -->
    <selfCollide>true</selfCollide>
  </gazebo>
  <!--
      Inject Gazebo ROS Control plugin, which allows us to use ros_control
      controllers to control the virtual robot hw.
    -->
  <gazebo>
    <plugin filename="libgazebo_ros_control.so" name="ros_control">
      <!--robotNamespace>/</robotNamespace-->
      <!--robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType-->
    </plugin>
  </gazebo>
  <!--
    Attach the Gazebo model to Gazebo's world frame.

    Note: if you're looking to integrate a UR into a larger scene and need
    to add EEFs or other parts, DO NOT change this file or the 'world' link
    here. Create a NEW xacro instead and decide whether you need to add
    a 'world' link there.
  -->
  <joint name="world_joint" type="fixed">
    <parent link="above_body_platform_link"/>
    <child link="ur5_base_link"/>
    <origin rpy="0 0 0" xyz="0.05 0 0.075"/>
  </joint>
  <link name="tool0_controller"/>
  <joint name="tool_controller_fake_joint" type="fixed">
    <parent link="ur5_tool0"/>
    <child link="tool0_controller"/>
    <origin rpy="0 0 0" xyz="0 0 0"/>
  </joint>
  <transmission name="trans_wheel_right_joint">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="wheel_right_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="wheel_right_joint_motor">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <transmission name="trans_wheel_left_joint">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="wheel_left_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="wheel_left_joint_motor">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
</robot>

